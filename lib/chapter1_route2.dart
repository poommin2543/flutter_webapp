// lib/chapter1_route2.dart - ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 1 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà 2
import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'dart:html' as html;
import 'gate_result_page.dart'; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ GateResultPage ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°
import 'constants.dart'; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ AppConstants

class Chapter1Route2Page extends StatefulWidget {
  final int chapter;
  final String username;
  final int routeId; // ‡∏£‡∏±‡∏ö routeId ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ (‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô 2)
  final VoidCallback onFinished;

  Chapter1Route2Page({
    required this.chapter,
    required this.username,
    required this.routeId,
    required this.onFinished,
  });

  @override
  _Chapter1Route2PageState createState() => _Chapter1Route2PageState();
}

class _Chapter1Route2PageState extends State<Chapter1Route2Page> {
  // ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà 2 (‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà 1)
  List<String> questions = [
    "‡πÉ‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà 2 ‡∏ô‡∏µ‡πâ ‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ô‡πâ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏î‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î?",
    "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏î‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î?",
    "‡∏ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏à‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤ ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
    "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏¢‡∏£‡∏∏‡πà‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ‡∏Ñ‡∏ß‡∏£‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡πÉ‡∏î?",
    "‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô?",
    "‡∏´‡∏≤‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤ ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
    "‡∏Ç‡πâ‡∏≠‡πÉ‡∏î‡∏Ñ‡∏∑‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ß‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≠‡∏≤‡∏à‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤?",
    "‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏¥‡∏Å‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
    "‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?",
    "‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏Ñ‡∏∑‡∏≠?",
  ];

  List<List<String>> options = [
    ["‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô", "‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï", "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á", "‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏ô‡∏•‡∏á‡πÇ‡∏ó‡∏©‡∏à‡∏≤‡∏Å‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"],
    ["‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î", "‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡∏Ç‡∏π‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ö‡∏≠‡∏Å‡∏Ñ‡∏£‡∏π", "‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏â‡∏¢"],
    ["‡πÄ‡∏•‡∏¥‡∏Å‡∏û‡∏π‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ", "‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å", "‡πÇ‡∏ï‡πâ‡πÄ‡∏ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏•‡∏±‡∏ö", "‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡∏µ‡πÑ‡∏õ"],
    ["‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤", "‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏™‡∏∏‡∏Ç", "‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤", "‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏ö‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"],
    ["‡∏Ç‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏π‡∏ö‡∏≠‡∏¢‡∏π‡πà", "‡πÉ‡∏ô‡∏ß‡∏á‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏ç‡πà", "‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß", "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞‡πÜ"],
    ["‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏±‡πâ‡∏ô", "‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏à‡πÄ‡∏¢‡πá‡∏ô", "‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡∏´‡∏ô‡∏¥", "‡∏ä‡∏ß‡∏ô‡πÑ‡∏õ‡∏•‡∏≠‡∏á‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô"],
    ["‡∏Å‡∏£‡∏∞‡∏´‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏π‡∏ö‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤", "‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô", "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô", "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏±‡∏á‡∏Ñ‡∏°‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô"],
    ["‡∏ã‡∏∑‡πâ‡∏≠‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ", "‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠", "‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏¥‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ", "‡πÄ‡∏¢‡∏≤‡∏∞‡πÄ‡∏¢‡πâ‡∏¢‡∏´‡∏≤‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"],
    ["‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÅ‡∏ó‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô", "‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ", "‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á", "‡∏û‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏•‡∏≠‡∏á‡∏™‡∏π‡∏ö"],
    ["‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏Ç‡πà‡∏°‡∏Ç‡∏π‡πà", "‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à", "‡∏û‡∏π‡∏î‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à", "‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏ï‡∏≤‡∏°"],
  ];

  List<String> answers = [
    "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á",
    "‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
    "‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å",
    "‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏™‡∏∏‡∏Ç",
    "‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß",
    "‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏à‡πÄ‡∏¢‡πá‡∏ô",
    "‡∏Å‡∏£‡∏∞‡∏´‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏π‡∏ö‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤",
    "‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠",
    "‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ",
    "‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à",
  ];

  List<String> userAnswers = ["", "", "", "", "", "", "", "", "", ""];
  int score = 0;
  int currentIndex = 0;
  String characterImage = 'assets/images/buddy_8.png'; // ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô
  bool answered = false;
  bool isCorrect = false;

  final html.AudioElement correctAudio = html.AudioElement(
    'assets/sounds/correct.mp3',
  )..preload = 'auto';
  final html.AudioElement wrongAudio = html.AudioElement(
    'assets/sounds/wrong.mp3',
  )..preload = 'auto';

  final List<String> questionImages = [
    'assets/images/question1_r2.png', // ‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Route 2
    'assets/images/question2_r2.jpg',
    'assets/images/question3_r2.png',
    'assets/images/question4_r2.jpg',
    'assets/images/question5_r2.jpg',
    'assets/images/question6_r2.png',
    'assets/images/question7_r2.jpg',
    'assets/images/question8_r2.png',
    'assets/images/question9_r2.jpg',
    'assets/images/question10_r2.png',
  ];

  void playCorrect() {
    if (kIsWeb) {
      correctAudio.pause();
      correctAudio.currentTime = 0;
      correctAudio.play();
    }
  }

  void playWrong() {
    if (kIsWeb) {
      wrongAudio.pause();
      wrongAudio.currentTime = 0;
      wrongAudio.play();
    }
  }

  void submitAnswer(String selected) async {
    bool correct = selected == answers[currentIndex];
    userAnswers[currentIndex] = selected;

    setState(() {
      answered = true;
      isCorrect = correct;
      characterImage = correct
          ? 'assets/images/buddy_happy.png'
          : 'assets/images/buddy_sad.png';
    });

    if (correct) {
      playCorrect();
    } else {
      playWrong();
    }

    await Future.delayed(const Duration(seconds: 3));

    setState(() {
      answered = false;
      characterImage = 'assets/images/buddy_8.png';
    });

    if (currentIndex + 1 < questions.length) {
      setState(() {
        currentIndex++;
      });
    } else {
      calculateScore();
    }
  }

  void calculateScore() async {
    score = 0;
    for (int i = 0; i < answers.length; i++) {
      if (userAnswers[i] == answers[i]) score++;
    }

    await http.post(
      Uri.parse('${AppConstants.API_BASE_URL}/submit_score'),
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode({
        'username': widget.username,
        'route_id': widget.routeId,
        'chapter_number': widget.chapter,
        'score': score,
      }),
    );

    await http.post(
      Uri.parse('${AppConstants.API_BASE_URL}/update_progress'),
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode({
        'username': widget.username,
        'current_chapter': widget.chapter + 1,
        'current_route_id': widget.routeId,
      }),
    );

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"),
        content: Text("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ $score ‡∏à‡∏≤‡∏Å ${answers.length} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              Navigator.pushReplacement(
                context,
                MaterialPageRoute(
                  builder: (context) => GateResultPage(
                    username: widget.username,
                    nextChapter: widget.chapter + 1,
                    nextRouteId: widget.routeId,
                    message: '‡∏à‡∏ö‡∏ö‡∏ó‡∏ó‡∏µ‡πà ${widget.chapter} ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà ${widget.routeId} ‡πÅ‡∏•‡πâ‡∏ß üéâ',
                    chapterDescription: '‡∏ö‡∏ó‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≤‡∏£‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î',
                  ),
                ),
              );
            },
            child: const Text('‡πÑ‡∏õ‡∏ï‡πà‡∏≠'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          '‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà ${widget.routeId} - ‡∏ö‡∏ó‡∏ó‡∏µ‡πà ${widget.chapter} ‚Äì ‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà ${currentIndex + 1}/${questions.length}',
        ),
        automaticallyImplyLeading: false,
      ),
      body: SafeArea(
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(16),
          child: Column(
            children: [
              Image.asset(characterImage, height: 300),
              const SizedBox(height: 20),
              if (currentIndex < questionImages.length)
                Image.asset(questionImages[currentIndex], height: 200),
              const SizedBox(height: 20),
              Text(
                questions[currentIndex],
                style: const TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
                textAlign: TextAlign.center,
              ),
              ...options[currentIndex].map((option) {
                return RadioListTile<String>(
                  title: Text(option),
                  value: option,
                  groupValue: answered ? answers[currentIndex] : null,
                  onChanged: answered ? null : (_) => submitAnswer(option),
                  tileColor: answered
                      ? (option == answers[currentIndex]
                            ? Colors.green.withOpacity(0.2)
                            : (option == userAnswers[currentIndex]
                                  ? Colors.red.withOpacity(0.2)
                                  : null))
                      : null,
                );
              }).toList(),
              if (answered)
                Padding(
                  padding: const EdgeInsets.symmetric(vertical: 8),
                  child: Text(
                    isCorrect ? '‚úÖ ‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á üéâ' : '‚ùå ‡∏ú‡∏¥‡∏î ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏∞ üò¢',
                    style: TextStyle(
                      fontSize: 20,
                      color: isCorrect ? Colors.green : Colors.red,
                    ),
                  ),
                ),
            ],
          ),
        ),
      ),
    );
  }
}
