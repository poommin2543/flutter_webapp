// lib/chapter2.dart
import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:flutter/material.dart';
import 'package:youtube_player_iframe/youtube_player_iframe.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'dart:html' as html; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AudioElement
import 'gate_result_page.dart'; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ GateResultPage ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°
import 'constants.dart'; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ AppConstants

class Chapter2Page extends StatefulWidget {
  final int chapter;
  final String username;
  final int routeId; // ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏£‡∏±‡∏ö routeId ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
  final VoidCallback onFinished;

  Chapter2Page({
    required this.chapter,
    required this.username,
    required this.routeId, // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö routeId
    required this.onFinished,
  });

  @override
  _Chapter2PageState createState() => _Chapter2PageState();
}

class _Chapter2PageState extends State<Chapter2Page> {
  late YoutubePlayerController _controller;
  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Web, path ‡∏Ç‡∏≠‡∏á Audio ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö web/index.html
  final html.AudioElement correctAudio = html.AudioElement(
    'assets/sounds/correct.mp3', // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô web/assets/sounds
  )..preload = 'auto';
  final html.AudioElement wrongAudio = html.AudioElement(
    'assets/sounds/wrong.mp3', // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô web/assets/sounds
  )..preload = 'auto';

  final List<String> videoIds = [
    '_8XW_BgiD_Q',
    'dfofaZaJ3Rc',
    'gCahggGt7ao',
    'WwSfLUtrx_Y',
    'ZnuO_wbMu9I', // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç videoId ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç videoId ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  ];
  final List<String> questions = [
    '‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡πà‡∏á‡πÉ‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡∏±‡∏Å‡∏à‡∏π‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏¢‡∏≤‡∏ß‡∏ä‡∏ô‡∏™‡∏ô‡πÉ‡∏à?',
    '‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏¢‡∏≤‡∏ß‡∏ä‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà‡∏≠‡∏∞‡πÑ‡∏£?',
    '‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏™‡∏≤‡∏£‡∏û‡∏¥‡∏©‡πÉ‡∏ô‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏™‡πà‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢?',
    '‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ú‡∏¥‡∏î‡∏Å‡∏è‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
    '‡∏Ç‡πâ‡∏≠‡πÉ‡∏î‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ú‡∏¥‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤?',
  ];
  final List<List<String>> options = [
    ['‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏´‡∏≠‡∏° ‡∏£‡∏π‡∏õ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå', '‡∏°‡∏µ‡∏™‡∏≤‡∏£‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î', '‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡∏°‡∏ß‡∏ô', '‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ó‡∏´‡πå'],
    ['‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢‡∏ô‡πâ‡∏≠‡∏¢', '‡∏™‡∏∑‡πà‡∏≠‡∏ä‡∏±‡∏Å‡∏ä‡∏ß‡∏ô', '‡∏Ñ‡∏ß‡∏±‡∏ô‡∏°‡∏∑‡∏≠‡∏™‡∏≠‡∏á', '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ä‡∏±‡∏Å‡∏ä‡∏ß‡∏ô'],
    ['‡πÑ‡∏ï', '‡∏≠‡∏ß‡∏±‡∏¢‡∏ß‡∏∞‡∏ó‡∏∏‡∏Å‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏ô‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢', '‡∏´‡∏±‡∏ß‡πÉ‡∏à', '‡∏Ç‡πâ‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å'],
    [
      '‡∏ñ‡∏π‡∏Å‡∏Å‡∏è‡∏´‡∏°‡∏≤‡∏¢',
      '‡∏ú‡∏¥‡∏î‡∏Å‡∏è‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤',
      '‡∏ú‡∏¥‡∏î‡∏Å‡∏è‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢',
      '‡∏ú‡∏¥‡∏î‡∏Å‡∏è‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏Å‡∏£‡∏ì‡∏µ‡πÉ‡∏î‡∏Å‡πá‡∏ï‡∏≤‡∏°',
    ],
    [
      '‡∏°‡∏µ‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏ô‡∏¥‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏õ‡∏≠‡∏î',
      '‡∏ß‡∏±‡∏¢‡∏£‡∏∏‡πà‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏π‡∏ö‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Å‡∏•‡∏¥‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥',
      '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏£‡∏ô‡∏¥‡πÇ‡∏Ñ‡∏ï‡∏¥‡∏ô',
      '‡∏Å‡∏≤‡∏£‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î‡πÑ‡∏î‡πâ',
    ],
  ];
  final List<String> answers = [
    '‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏´‡∏≠‡∏° ‡∏£‡∏π‡∏õ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå',
    '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ä‡∏±‡∏Å‡∏ä‡∏ß‡∏ô',
    '‡∏≠‡∏ß‡∏±‡∏¢‡∏ß‡∏∞‡∏ó‡∏∏‡∏Å‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏ô‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢',
    '‡∏ú‡∏¥‡∏î‡∏Å‡∏è‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏Å‡∏£‡∏ì‡∏µ‡πÉ‡∏î‡∏Å‡πá‡∏ï‡∏≤‡∏°',
    '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏£‡∏ô‡∏¥‡πÇ‡∏Ñ‡∏ï‡∏¥‡∏ô',
  ];

  int currentIndex = 0;
  late List<String> userAnswers;
  int totalScore = 0;
  bool answered = false;
  bool isCorrect = false;
  String characterImage = 'assets/images/buddy_8.png'; // ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô
  bool videoEnded = false;

  final html.AudioElement backgroundAudio =
      html.AudioElement('assets/sounds/background.mp3')
        ..loop = true
        ..autoplay = true
        ..volume = 0.3;

  @override
  void initState() {
    super.initState();
    backgroundAudio.play();
    userAnswers = List.filled(videoIds.length, '');

    _controller = YoutubePlayerController.fromVideoId(
      videoId: videoIds[0],
      params: const YoutubePlayerParams(
        showFullscreenButton: true,
        showControls: true,
      ),
    );

    // üëá Add this listener
    _controller.listen((event) {
      if (event.playerState == PlayerState.ended) {
        setState(() {
          videoEnded = true;
        });
      }
    });
  }

  @override
  void dispose() {
    backgroundAudio.pause(); // Stop audio
    backgroundAudio.src = ''; // Clean up
    _controller.close();
    super.dispose();
  }

  void _loadVideoAtIndex(int idx) {
    // ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà index ‡∏ó‡∏µ‡πà 4 ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏ó‡∏ô
    if (idx < videoIds.length) {
      if (idx != 51) {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà 5 (index 4) ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
        _controller.loadVideoById(videoId: videoIds[idx]);
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà 5 ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
        // _controller.stop();
      }
    }
    setState(() {
      answered = false;
      videoEnded = false; // üîÅ Reset this for the new video
      userAnswers[idx] = ''; // Reset user's answer for the new question
      characterImage = 'assets/images/buddy_8.png'; // Revert character image
    });
  }

  Future<void> _submitAnswer() async {
    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ã‡πâ‡∏≥

    if (answered) return;

    isCorrect = userAnswers[currentIndex] == answers[currentIndex];
    answered = true; // ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    characterImage = isCorrect
        ? 'assets/images/buddy_8c.gif'
        : 'assets/images/buddy_8w.gif';

    if (kIsWeb) {
      if (isCorrect) {
        correctAudio.currentTime = 0;
        correctAudio.play();
      } else {
        wrongAudio.currentTime = 0;
        wrongAudio.play();
      }
    }

    setState(() {}); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£

    await Future.delayed(const Duration(seconds: 2)); // ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≠ ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ/‡∏à‡∏ö‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    if (isCorrect) {
      totalScore++;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    bool isCurrentChapterQuizFinished = (currentIndex + 1 >= videoIds.length);

    int chapterToAdvanceTo = widget.chapter; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏ö‡∏ó‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    int routeIdToAdvanceTo = widget.routeId; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

    if (isCurrentChapterQuizFinished) {
      // ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß
      // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ 5 ‡∏ö‡∏ó‡∏ï‡πà‡∏≠‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á (‡∏ö‡∏ó‡∏ó‡∏µ‡πà 1 ‡∏ñ‡∏∂‡∏á 5)
      if (widget.chapter == 5) {
        // ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ó‡∏ó‡∏µ‡πà 5 (‡∏ö‡∏ó‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á) ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 1 ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        chapterToAdvanceTo = 1; // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 1 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        routeIdToAdvanceTo = widget.routeId + 1; // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      } else {
        // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ö‡∏ó‡∏ó‡∏µ‡πà 5 ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏ö‡∏ó‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÉ‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏°
        chapterToAdvanceTo = widget.chapter + 1;
        routeIdToAdvanceTo = widget.routeId;
      }
    }

    // ‡∏™‡πà‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á Backend (‡∏™‡πà‡∏á‡πÄ‡∏™‡∏°‡∏≠ ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏à‡∏ö‡∏ö‡∏ó‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà)
    try {
      final response = await http.post(
        Uri.parse('${AppConstants.API_BASE_URL}/submit_score'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'username': widget.username,
          'chapter': widget.chapter, // ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏ö‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏ó‡∏≥‡πÄ‡∏™‡∏£‡πá‡∏à/‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ó‡∏≥
          'score':
              totalScore, // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ô‡∏µ‡πâ (‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
          'route_id': widget.routeId,
          'is_finished':
              isCurrentChapterQuizFinished, // True ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô *‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ô‡∏µ‡πâ* ‡∏ñ‡∏π‡∏Å‡∏ó‡∏≥‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
          'next_chapter': chapterToAdvanceTo, // ‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ
          'next_route_id':
              routeIdToAdvanceTo, // ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ
        }),
      );

      if (response.statusCode == 200) {
        print('Score submitted successfully! Progress updated on Backend.');
      } else {
        print(
          'Failed to submit score: ${response.statusCode} - ${response.body}',
        );
      }
    } catch (e) {
      print('Error submitting score: $e');
    }

    // ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏ô‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô *‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô* ‡∏≠‡∏µ‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (currentIndex + 1 < videoIds.length) {
      setState(() {
        currentIndex++;
        _loadVideoAtIndex(
          currentIndex,
        ); // ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      });
    } else {
      // ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß
      print(
        'Chapter ${widget.chapter} (Route ${widget.routeId}) finished. Final score: $totalScore',
      );

      if (!mounted) return; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Widget ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Tree ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á Dialog
      showDialog(
        context: context,
        barrierDismissible: false, // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î Dialog ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡∏∞‡∏î‡πâ‡∏≤‡∏ô‡∏ô‡∏≠‡∏Å
        builder: (context) => AlertDialog(
          title: const Text("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"),
          content: Text("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ $totalScore ‡∏à‡∏≤‡∏Å ${answers.length} ‡∏Ç‡πâ‡∏≠"),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.pop(context); // ‡∏õ‡∏¥‡∏î Dialog
                // ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ GateResultPage ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                Navigator.pushReplacement(
                  context,
                  MaterialPageRoute(
                    builder: (context) => GateResultPage(
                      username: widget.username,
                      nextChapter: chapterToAdvanceTo, // ‡∏™‡πà‡∏á‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡πâ‡∏ß
                      nextRouteId: routeIdToAdvanceTo, // ‡∏™‡πà‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡πâ‡∏ß
                      message: '‡∏à‡∏ö‡∏ö‡∏ó‡∏ó‡∏µ‡πà ${widget.chapter} ‡πÅ‡∏•‡πâ‡∏ß üéâ',
                      chapterDescription:
                          '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏ö‡∏ó‡∏ï‡πà‡∏≠‡πÑ‡∏õ...', // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ
                    ),
                  ),
                );
              },
              child: const Text('‡πÑ‡∏õ‡∏ï‡πà‡∏≠'),
            ),
          ],
        ),
      );
    }
  }

  Color _optionColor(String opt) {
    if (!answered) return Colors.transparent;
    if (opt == answers[currentIndex]) return Colors.green.withOpacity(0.3);
    if (opt == userAnswers[currentIndex] && !isCorrect)
      return Colors.red.withOpacity(0.3);
    return Colors.transparent;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          '‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà ${widget.routeId} ‡∏ö‡∏ó‡∏ó‡∏µ‡πà ${widget.chapter} ‚Äì ‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà ${currentIndex + 1}/${videoIds.length}',
        ),
        automaticallyImplyLeading: false, // ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Image.asset(
                  characterImage,
                  height: 400,
                ), // Resize image as needed
                const SizedBox(width: 20), // Space between image and video
                SizedBox(
                  width: 700,
                  height: 400,
                  child: YoutubePlayer(controller: _controller),
                ),
              ],
            ),
            const SizedBox(height: 20),
            Text(
              questions[currentIndex],
              style: const TextStyle(fontSize: 36, fontWeight: FontWeight.bold),
              textAlign: TextAlign.center,
            ),
            if (!videoEnded)
              Padding(
                padding: const EdgeInsets.all(10),
                child: Text(
                  '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ä‡∏°‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÉ‡∏´‡πâ‡∏à‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö',
                  style: TextStyle(color: Colors.red, fontSize: 24),
                  textAlign: TextAlign.center,
                ),
              ),
            ...options[currentIndex]
                .map(
                  (opt) => Container(
                    width:
                        MediaQuery.of(context).size.width *
                        0.5, // 80% of screen width
                    child: Card(
                      elevation: 3,
                      margin: const EdgeInsets.symmetric(vertical: 8),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: RadioListTile<String>(
                        contentPadding: const EdgeInsets.symmetric(
                          horizontal: 12,
                          vertical: 4,
                        ),
                        title: Text(
                          opt,
                          style: const TextStyle(
                            fontSize: 24,
                          ), // Resize font here
                          textAlign: TextAlign.center,
                        ),
                        value: opt,
                        groupValue: userAnswers[currentIndex],
                        onChanged: (!answered && videoEnded)
                            ? (val) => setState(
                                () => userAnswers[currentIndex] = val!,
                              )
                            : null,
                        tileColor: _optionColor(opt),
                      ),
                    ),
                  ),
                )
                .toList(),
            if (answered) const SizedBox(height: 10),
            if (answered)
              Padding(
                padding: const EdgeInsets.symmetric(vertical: 8),
                child: Text(
                  isCorrect ? '‚úÖ ‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á üéâ' : '‚ùå ‡∏ú‡∏¥‡∏î ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡∏ô‡∏∞ üò¢',
                  style: TextStyle(
                    fontSize: 18,
                    color: isCorrect ? Colors.green : Colors.red,
                  ),
                ),
              ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: (!videoEnded || answered)
                  ? null
                  : (userAnswers[currentIndex].isNotEmpty
                        ? _submitAnswer
                        : null),
              child: Text(
                answered
                    ? (currentIndex + 1 < videoIds.length ? '‡∏ñ‡∏±‡∏î‡πÑ‡∏õ' : '‡∏™‡πà‡∏á')
                    : '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô',
              ),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blueAccent,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(
                  horizontal: 30,
                  vertical: 15,
                ),
                textStyle: const TextStyle(fontSize: 18),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
