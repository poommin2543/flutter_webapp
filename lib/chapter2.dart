// lib/chapter2.dart
import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:flutter/material.dart';
import 'package:youtube_player_iframe/youtube_player_iframe.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'dart:html' as html; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AudioElement
import 'gate_result_page.dart'; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ GateResultPage ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°
import 'constants.dart'; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ AppConstants

class Chapter2Page extends StatefulWidget {
  final int chapter;
  final String username;
  final int routeId; // ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏£‡∏±‡∏ö routeId ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
  final VoidCallback onFinished;

  Chapter2Page({
    required this.chapter,
    required this.username,
    required this.routeId, // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö routeId
    required this.onFinished,
  });

  @override
  _Chapter2PageState createState() => _Chapter2PageState();
}

class _Chapter2PageState extends State<Chapter2Page> {
  late YoutubePlayerController _controller;
  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Web, path ‡∏Ç‡∏≠‡∏á Audio ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö web/index.html
  final html.AudioElement correctAudio = html.AudioElement(
    'assets/sounds/correct.mp3', // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô web/assets/sounds
  )..preload = 'auto';
  final html.AudioElement wrongAudio = html.AudioElement(
    'assets/sounds/wrong.mp3', // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô web/assets/sounds
  )..preload = 'auto';

  final List<String> videoIds = [
    '_8XW_BgiD_Q', // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á videoId
    'dfofaZaJ3Rc',
    'gCahggGt7ao',
    'WwSfLUtrx_Y',
    'WwSfLUtrx_Y', // ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÄ‡∏î‡∏¥‡∏° ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÅ‡∏ó‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  ];
  final List<String> questions = [
    '‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡πà‡∏á‡πÉ‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡∏±‡∏Å‡∏à‡∏π‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏¢‡∏≤‡∏ß‡∏ä‡∏ô‡∏™‡∏ô‡πÉ‡∏à?',
    '‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏¢‡∏≤‡∏ß‡∏ä‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà‡∏≠‡∏∞‡πÑ‡∏£?',
    '‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏™‡∏≤‡∏£‡∏û‡∏¥‡∏©‡πÉ‡∏ô‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏™‡πà‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢?',
    '‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ú‡∏¥‡∏î‡∏Å‡∏è‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
    '‡∏Ç‡πâ‡∏≠‡πÉ‡∏î‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ú‡∏¥‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤?',
  ];
  final List<List<String>> options = [
    ['‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏´‡∏≠‡∏° ‡∏£‡∏π‡∏õ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå', '‡∏°‡∏µ‡∏™‡∏≤‡∏£‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î', '‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡∏°‡∏ß‡∏ô', '‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ó‡πà‡∏´‡πå'],
    ['‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢‡∏ô‡πâ‡∏≠‡∏¢', '‡∏™‡∏∑‡πà‡∏≠‡∏ä‡∏±‡∏Å‡∏ä‡∏ß‡∏ô', '‡∏Ñ‡∏ß‡∏±‡∏ô‡∏°‡∏∑‡∏≠‡∏™‡∏≠‡∏á', '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ä‡∏±‡∏Å‡∏ä‡∏ß‡∏ô'],
    ['‡πÑ‡∏ï', '‡∏≠‡∏ß‡∏±‡∏¢‡∏ß‡∏∞‡∏ó‡∏∏‡∏Å‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏ô‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢', '‡∏´‡∏±‡∏ß‡πÉ‡∏à', '‡∏Ç‡πâ‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å'],
    [
      '‡∏ñ‡∏π‡∏Å‡∏Å‡∏è‡∏´‡∏°‡∏≤‡∏¢',
      '‡∏ú‡∏¥‡∏î‡∏Å‡∏è‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤',
      '‡∏ú‡∏¥‡∏î‡∏Å‡∏è‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢',
      '‡∏ú‡∏¥‡∏î‡∏Å‡∏è‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏Å‡∏£‡∏ì‡∏µ‡πÉ‡∏î‡∏Å‡πá‡∏ï‡∏≤‡∏°',
    ],
    ['‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏£‡∏∞‡∏´‡∏ô‡∏±‡∏Å', '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏£‡∏ô‡∏¥‡πÇ‡∏Ñ‡∏ï‡∏¥‡∏ô', '‡∏ñ‡∏π‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ç‡πâ‡∏≠'],
  ];
  final List<String> answers = [
    '‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏´‡∏≠‡∏° ‡∏£‡∏π‡∏õ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå',
    '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ä‡∏±‡∏Å‡∏ä‡∏ß‡∏ô',
    '‡∏≠‡∏ß‡∏±‡∏¢‡∏ß‡∏∞‡∏ó‡∏∏‡∏Å‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏ô‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢',
    '‡∏ú‡∏¥‡∏î‡∏Å‡∏è‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏Å‡∏£‡∏ì‡∏µ‡πÉ‡∏î‡∏Å‡πá‡∏ï‡∏≤‡∏°',
    '‡∏ñ‡∏π‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ç‡πâ‡∏≠',
  ];

  int currentIndex = 0;
  late List<String> userAnswers;
  int totalScore = 0;
  bool answered = false;
  bool isCorrect = false;
  String characterImage = 'assets/images/buddy_8.png';

  @override
  void initState() {
    super.initState();
    userAnswers = List.filled(videoIds.length, '');
    _controller = YoutubePlayerController.fromVideoId(
      videoId: videoIds[0],
      params: const YoutubePlayerParams(
        showFullscreenButton: true,
        showControls: true,
      ),
    );
  }

  @override
  void dispose() {
    _controller.close();
    super.dispose();
  }

  void _loadVideoAtIndex(int idx) {
    if (idx < videoIds.length && idx != 4) { // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà index 4 (‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ã‡πâ‡∏≥) ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
      _controller.loadVideoById(videoId: videoIds[idx]);
    }
    setState(() {
      answered = false;
      userAnswers[idx] = '';
      characterImage = 'assets/images/buddy_8.png';
    });
  }

  Future<void> _submitAnswer() async {
    isCorrect = userAnswers[currentIndex] == answers[currentIndex];
    answered = true;
    characterImage = isCorrect
        ? 'assets/images/buddy_happy.png'
        : 'assets/images/buddy_sad.png';

    if (kIsWeb) {
      if (isCorrect) {
        correctAudio.currentTime = 0;
        correctAudio.play();
      } else {
        wrongAudio.currentTime = 0;
        wrongAudio.play();
      }
    }

    setState(() {});

    await Future.delayed(const Duration(seconds: 2));
    if (!mounted) return;

    if (isCorrect) {
      totalScore++;
    }

    if (currentIndex + 1 < videoIds.length) {
      currentIndex++;
      _loadVideoAtIndex(currentIndex);
    } else {
      // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏ö‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
      await http.post(
        Uri.parse('${AppConstants.API_BASE_URL}/submit_score'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'username': widget.username,
          'route_id': widget.routeId, // ‡∏™‡πà‡∏á route_id
          'chapter_number': widget.chapter,
          'score': totalScore,
        }),
      );
      await http.post(
        Uri.parse('${AppConstants.API_BASE_URL}/update_progress'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'username': widget.username,
          'current_chapter': widget.chapter + 1,
          'current_route_id': widget.routeId, // ‡∏™‡πà‡∏á routeId ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        }),
      );

      if (!mounted) return;
      showDialog(
        context: context,
        builder: (_) => AlertDialog(
          title: const Text("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"),
          content: Text("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ $totalScore ‡∏à‡∏≤‡∏Å ${answers.length} ‡∏Ç‡πâ‡∏≠"),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.pop(context);
                Navigator.pushReplacement(
                  context,
                  MaterialPageRoute(
                    builder: (_) => GateResultPage(
                      chapterDescription: '‡∏ö‡∏ó‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
                      message: '‡∏à‡∏ö‡∏ö‡∏ó‡∏ó‡∏µ‡πà ${widget.chapter} ‡πÅ‡∏•‡πâ‡∏ß üéâ',
                      nextChapter: widget.chapter + 1,
                      nextRouteId: widget.routeId, // ‡∏™‡πà‡∏á routeId ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                      username: widget.username,
                    ),
                  ),
                );
              },
              child: const Text('OK'),
            ),
          ],
        ),
      );
    }
  }

  Color _optionColor(String opt) {
    if (!answered) return Colors.transparent;
    if (opt == answers[currentIndex]) return Colors.green.withOpacity(0.3);
    if (opt == userAnswers[currentIndex] && !isCorrect)
      return Colors.red.withOpacity(0.3);
    return Colors.transparent;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          '‡∏ö‡∏ó‡∏ó‡∏µ‡πà ${widget.chapter} ‚Äì ‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà ${currentIndex + 1}/${videoIds.length}',
        ),
        automaticallyImplyLeading: false,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            SizedBox(
              width: MediaQuery.of(context).size.width * 0.9,
              height: 400,
              child: currentIndex == 4
                  ? Image.asset('assets/images/Q5.jpg', fit: BoxFit.contain)
                  : YoutubePlayer(controller: _controller),
            ),
            const SizedBox(height: 20),
            Text(
              questions[currentIndex],
              style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              textAlign: TextAlign.center,
            ),
            ...options[currentIndex].map(
              (opt) => Container(
                color: _optionColor(opt),
                child: RadioListTile<String>(
                  title: Text(opt),
                  value: opt,
                  groupValue: userAnswers[currentIndex],
                  onChanged: answered
                      ? null
                      : (val) =>
                            setState(() => userAnswers[currentIndex] = val!),
                ),
              ),
            ).toList(), // ‡πÄ‡∏û‡∏¥‡πà‡∏° .toList()
            if (answered) const SizedBox(height: 10),
            if (answered)
              Text(
                isCorrect ? '‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á üéâ' : '‡∏ú‡∏¥‡∏î ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà üòü',
                style: TextStyle(
                  fontSize: 18,
                  color: isCorrect ? Colors.green : Colors.red,
                ),
              ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed:
                  (!answered && userAnswers[currentIndex].isNotEmpty) || answered
                      ? _submitAnswer
                      : null,
              child: Text(
                answered
                    ? (currentIndex + 1 < videoIds.length ? '‡∏ñ‡∏±‡∏î‡πÑ‡∏õ' : '‡∏™‡πà‡∏á')
                    : '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô',
              ),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blueAccent,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 15),
                textStyle: const TextStyle(fontSize: 18),
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
              ),
            ),
            const SizedBox(height: 20),
            Image.asset(characterImage, height: 120),
          ],
        ),
      ),
    );
  }
}
