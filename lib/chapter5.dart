import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'summary_page.dart'; // Import the new SummaryPage

class Chapter5Page extends StatefulWidget {
  final int chapter;
  final String username;
  final VoidCallback onFinished;

  Chapter5Page({
    required this.chapter,
    required this.username,
    required this.onFinished,
  });

  @override
  _Chapter5PageState createState() => _Chapter5PageState();
}

class _Chapter5PageState extends State<Chapter5Page> {
  // Controller ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô
  final TextEditingController _commentController = TextEditingController();
  String _message = ''; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î)

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° (‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô AlertDialog)
  final List<String> questions = [
    "‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡πÄ‡∏≠‡∏á ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤?",
  ];

  final List<List<String>> options = [
    ["‡πÉ‡∏ä‡πà ‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£", "‡πÉ‡∏ä‡πà ‡∏ö‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£", "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà ‡∏ö‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£", "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£"],
  ];

  final List<String> answers = ["‡πÉ‡∏ä‡πà ‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£"];
  List<String> userAnswers = []; // Initialized in initState
  int score = 0;

  @override
  void initState() {
    super.initState();
    // Initialize userAnswers with empty strings based on the number of questions
    userAnswers = List.filled(questions.length, "");
  }

  @override
  void dispose() {
    _commentController.dispose();
    super.dispose();
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á Backend
  Future<void> _submitComment() async {
    setState(() {
      _message = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô...';
    });

    try {
      final response = await http.post(
        // ‡πÉ‡∏ä‡πâ URL ‡∏Ç‡∏≠‡∏á Go backend ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà
        Uri.parse(
          'https://apiwebmoss.roverautonomous.com/add_comment',
        ), // <-- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï URL ‡∏ô‡∏µ‡πâ
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'username': widget.username,
          'comment_text': _commentController.text,
        }),
      );

      final data = jsonDecode(response.body);

      if (response.statusCode == 201) {
        setState(() {
          _message = '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!';
        });
        _commentController.clear(); // ‡∏•‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        _showQuizDialog(); // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô
      } else {
        setState(() {
          _message = '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô: ${data['message']}';
        });
        _showQuizDialog(); // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      }
    } catch (e) {
      setState(() {
        _message = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: $e';
      });
      _showQuizDialog(); // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Backend (‡πÉ‡∏ä‡πâ‡πÉ‡∏ô AlertDialog)
  void _calculateAndSubmitScore(BuildContext dialogContext) async {
    score = 0;
    for (int i = 0; i < answers.length; i++) {
      if (userAnswers[i] == answers[i]) {
        score++;
      }
    }

    try {
      // ‡∏™‡πà‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏õ backend
      await http.post(
        Uri.parse('https://apiwebmoss.roverautonomous.com/submit_score'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'username': widget.username,
          'chapter_number': widget.chapter,
          'score': score,
        }),
      );

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
      await http.post(
        Uri.parse('https://apiwebmoss.roverautonomous.com/update_progress'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'username': widget.username,
          'current_chapter': widget.chapter + 1,
        }),
      );
    } catch (e) {
      print('Error submitting score or updating progress: $e');
      // ‡∏≠‡∏≤‡∏à‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    }

    // ‡∏õ‡∏¥‡∏î AlertDialog ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á AlertDialog ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    Navigator.pop(dialogContext);

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"),
        content: Text("‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏î‡πâ $score ‡∏à‡∏≤‡∏Å ${answers.length} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.pop(context); // ‡∏õ‡∏¥‡∏î dialog ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
              // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà widget.onFinished() ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á SummaryPage
              Navigator.pushReplacement(
                context,
                MaterialPageRoute(
                  builder: (context) => SummaryPage(username: widget.username),
                ),
              );
            },
            child: const Text('‡∏ï‡∏Å‡∏•‡∏á'),
          ),
        ],
      ),
    );
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö AlertDialog
  void _showQuizDialog() {
    showDialog(
      context: context,
      barrierDismissible: false, // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î dialog ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô
      builder: (BuildContext dialogContext) {
        // ‡πÉ‡∏ä‡πâ StatefulBuilder ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ State ‡∏Ç‡∏≠‡∏á RadioListTile ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô AlertDialog
        return StatefulBuilder(
          builder: (BuildContext context, StateSetter setDialogState) {
            return AlertDialog(
              title: Text('‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏ó‡∏ó‡∏µ‡πà ${widget.chapter}'),
              content: SingleChildScrollView(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  mainAxisSize:
                      MainAxisSize.min, // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î Column ‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏î‡∏µ‡∏Å‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
                  children: [
                    // ‡∏•‡∏ö Image.asset ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
                    SizedBox(height: 20),
                    for (int i = 0; i < questions.length; i++)
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            questions[i],
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          ...options[i].map((option) {
                            return RadioListTile<String>(
                              title: Text(option),
                              value: option,
                              groupValue: userAnswers[i],
                              onChanged: (value) {
                                setDialogState(() {
                                  // ‡πÉ‡∏ä‡πâ setDialogState ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô dialog
                                  userAnswers[i] = value!;
                                });
                              },
                            );
                          }).toList(),
                          SizedBox(height: 10),
                        ],
                      ),
                  ],
                ),
              ),
              actions: [
                TextButton(
                  onPressed: () {
                    _calculateAndSubmitScore(
                      dialogContext,
                    ); // ‡∏™‡πà‡∏á dialogContext ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
                  },
                  child: const Text('‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö'),
                ),
              ],
            );
          },
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('‡∏ö‡∏ó‡∏ó‡∏µ‡πà ${widget.chapter}')),
      body: SafeArea(
        child: SingleChildScrollView(
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                // ‡∏•‡∏ö Image.asset ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
                const SizedBox(height: 20),
                // üßç‚Äç‚ôÇÔ∏è INSERT CHARACTER IMAGE HERE
                Image.asset(
                  'assets/images/buddy_8.png', // Replace with your actual path
                  height: 300,
                ),

                const SizedBox(height: 20),

                // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ"
                const Text(
                  "‡∏â‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠ ‡∏ï‡πâ‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏ï‡πâ‡∏ô ‡∏≠‡∏¢‡∏π‡πà ‡∏°.2 ‡∏ä‡∏≠‡∏ö‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏µ‡∏¨‡∏≤ ‡∏°‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏™‡∏ô‡∏¥‡∏ó‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ö‡∏≤‡∏á‡∏Ñ‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏î‡∏π‡πÄ‡∏ó‡πà‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏´‡∏≠‡∏°\n\n"
                  "‡∏ß‡∏±‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏ï‡πâ‡∏ô‡∏ô‡∏±‡πà‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ï‡πâ‡∏ï‡∏∂‡∏Å‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏™‡∏ô‡∏¥‡∏ó 3‚Äì4 ‡∏Ñ‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏´‡∏¢‡∏¥‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤\n\n"
                  "‚Äú‡∏•‡∏≠‡∏á‡∏î‡∏π‡∏î‡∏¥ ‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á ‡∏´‡∏≠‡∏°‡∏°‡∏≤‡∏Å ‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢‡∏´‡∏£‡∏≠‡∏Å ‡∏Ñ‡∏ô‡∏™‡∏π‡∏ö‡∏Å‡∏±‡∏ô‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏•‡∏¢‚Äù\n\n"
                  "‡∏ï‡πâ‡∏ô‡∏•‡∏±‡∏á‡πÄ‡∏•... ‡πÄ‡∏Ç‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏•‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏ï‡πà‡∏Å‡πá‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÇ‡∏î‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏°‡∏≠‡∏á‡∏ß‡πà‡∏≤ ‚Äú‡πÄ‡∏ä‡∏¢‚Äù ‡∏´‡∏£‡∏∑‡∏≠ ‚Äú‡∏Å‡∏•‡∏±‡∏ß‚Äù\n\n"
                  "‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏¢‡∏∑‡πà‡∏ô‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏ï‡πâ‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤: ‚Äú‡∏à‡∏∞‡∏•‡∏≠‡∏á‡πÑ‡∏´‡∏°? ‡∏•‡∏≠‡∏á‡πÅ‡∏Ñ‡πà‡∏ó‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡πá‡πÑ‡∏î‡πâ‚Äù",
                  style: TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Colors.indigo,
                  ),
                  textAlign: TextAlign.center,
                ),
                const SizedBox(height: 20),

                // ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô
                TextField(
                  controller: _commentController,
                  maxLines: 5,
                  decoration: InputDecoration(
                    hintText: '‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÜ ‡∏Ñ‡∏∑‡∏≠',
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10),
                    ),
                    filled: true,
                    fillColor: Colors.grey[100],
                  ),
                ),
                const SizedBox(height: 20),

                // ‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô
                ElevatedButton(
                  onPressed: _submitComment,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.blue, // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
                    foregroundColor: Colors.white, // ‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
                    padding: const EdgeInsets.symmetric(
                      horizontal: 40,
                      vertical: 15,
                    ),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(10),
                    ),
                  ),
                  child: const Text(
                    "‡∏™‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô",
                    style: TextStyle(fontSize: 18),
                  ),
                ),
                const SizedBox(height: 20),

                // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                _message.isNotEmpty
                    ? Text(
                        _message,
                        style: TextStyle(
                          color: _message.contains('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î')
                              ? Colors.red
                              : Colors.green,
                          fontWeight: FontWeight.bold,
                        ),
                        textAlign: TextAlign.center,
                      )
                    : const SizedBox.shrink(),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
