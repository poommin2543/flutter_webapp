// lib/route_selection_page.dart (‡πÄ‡∏î‡∏¥‡∏°‡∏Ñ‡∏∑‡∏≠ bonus_page.dart)
import 'package:flutter/material.dart';
import 'gate_result_page.dart'; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ GateResultPage ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°
import 'constants.dart'; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ AppConstants
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'intro_page.dart'; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Intro ‡∏Ç‡∏≠‡∏á‡∏ö‡∏ó‡∏ó‡∏µ‡πà 1 ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏∑‡πà‡∏ô‡πÜ

class RouteSelectionPage extends StatefulWidget {
  final String username;
  final String fullName;
  final int currentChapter; // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ currentChapter ‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢ (‡∏à‡∏≤‡∏Å Backend)
  final int currentRouteId; // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ currentRouteId ‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢ (‡∏à‡∏≤‡∏Å Backend)
  final String selectedCharacterName; // ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å

  RouteSelectionPage({
    required this.username,
    required this.fullName,
    required this.currentChapter,
    required this.currentRouteId,
    required this.selectedCharacterName,
  });

  @override
  _RouteSelectionPageState createState() => _RouteSelectionPageState();
}

class _RouteSelectionPageState extends State<RouteSelectionPage> {
  // ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏à‡∏∞‡∏Ç‡∏¢‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡∏ï‡∏π)
  double _characterX = 0.0;
  double _characterY = 0.8;
  Duration _duration = const Duration(milliseconds: 2000);

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
  final List<Map<String, dynamic>> routes = [
    {'id': 1, 'name': '‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà 1', 'isUnlocked': true, 'gateX': -0.6, 'chapterDescription': '‡∏ö‡∏ó‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô'},
    {'id': 2, 'name': '‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà 2', 'isUnlocked': true, 'gateX': 0.0, 'chapterDescription': '‡∏ö‡∏ó‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤'}, // **‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô true**
    {'id': 3, 'name': '‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà 3', 'isUnlocked': true, 'gateX': 0.6, 'chapterDescription': '‡∏ö‡∏ó‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}, // **‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô true**
  ];

  @override
  void initState() {
    super.initState();
    // ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏•‡∏π‡∏õ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏£‡∏≤ hardcode isUnlocked ‡πÄ‡∏õ‡πá‡∏ô true
    // ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡∏¢‡∏±‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Backend
    // ‡πÉ‡∏´‡πâ‡∏Ñ‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç 'isUnlocked' ‡πÉ‡∏ô List 'routes' ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô false ‡∏ï‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏ô
    // for (var route in routes) {
    //   if (route['id'] <= widget.currentRouteId) {
    //     route['isUnlocked'] = true;
    //   }
    // }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏¢‡πâ‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡∏ó‡∏≤‡∏á
  void moveToGate(int selectedRouteId, double gateX) async {
    setState(() {
      _characterX = gateX;
      _characterY = -0.6; // ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏à‡∏∞‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
    });

    await Future.delayed(_duration); // ‡∏£‡∏≠‡πÉ‡∏´‡πâ Animation ‡∏à‡∏ö

    if (!mounted) return;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    int chapterToStart = 1;
    if (selectedRouteId == widget.currentRouteId) {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ó‡∏≥‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà chapter ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ
      chapterToStart = widget.currentChapter;
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà chapter 1 ‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ô‡∏±‡πâ‡∏ô
      chapterToStart = 1;
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï current_chapter ‡πÅ‡∏•‡∏∞ current_route_id ‡πÉ‡∏ô backend
    // ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏Å‡πá‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state ‡πÉ‡∏ô backend
    try {
      final response = await http.post(
        Uri.parse('${AppConstants.API_BASE_URL}/update_progress'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'username': widget.username,
          'current_chapter': chapterToStart,
          'current_route_id': selectedRouteId,
        }),
      );

      if (response.statusCode == 200) {
        print('Route progress updated successfully!');
      } else {
        print('Failed to update route progress: ${response.body}');
      }
    } catch (e) {
      print('Error updating route progress: $e');
    }

    // ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á GateResultPage ‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• routeId ‡πÅ‡∏•‡∏∞ chapter ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏õ‡∏ï‡πà‡∏≠
    // GateResultPage ‡∏à‡∏∞‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ IntroPage ‡∏´‡∏£‡∏∑‡∏≠ ChapterPage ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(
        builder: (context) => GateResultPage(
          username: widget.username,
          nextChapter: chapterToStart, // ‡∏à‡∏∞‡πÑ‡∏õ‡∏ö‡∏ó‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
          nextRouteId: selectedRouteId, // ‡∏™‡πà‡∏á routeId ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏õ‡πÉ‡∏´‡πâ GateResultPage
          message: '‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å${routes.firstWhere((r) => r['id'] == selectedRouteId)['name']}‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß üéâ',
          chapterDescription: routes.firstWhere((r) => r['id'] == selectedRouteId)['chapterDescription'], // ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏ó‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    // ‡∏Å‡∏≤‡∏£‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏ñ‡πâ‡∏≤ routes ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ isUnlocked: true ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÅ‡∏£‡∏Å
    // ‡πÅ‡∏ï‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• icon lock ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á logic ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
    for (var route in routes) {
      // route['isUnlocked'] = route['id'] <= widget.currentRouteId; // Old logic
      // No change needed here if you want all routes unlocked by default in the list above.
    }

    return Scaffold(
      appBar: AppBar(
        title: const Text('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì'),
        automaticallyImplyLeading: false,
      ),
      body: Stack(
        children: [
          // ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
          CustomPaint(
            size: Size(double.infinity, double.infinity),
            painter: PathPainter(),
          ),

          // ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
          AnimatedAlign(
            alignment: Alignment(_characterX, _characterY),
            duration: _duration,
            child: Image.asset('assets/images/buddy_8.png', width: 100),
          ),

          // ‡∏õ‡∏£‡∏∞‡∏ï‡∏π + ‡∏õ‡∏∏‡πà‡∏°
          Align(
            alignment: Alignment.topCenter,
            child: Padding(
              padding: const EdgeInsets.only(top: 80.0),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: routes.map((route) {
                  // ‡∏´‡∏≤‡∏Å‡πÄ‡∏£‡∏≤ hardcode isUnlocked ‡πÄ‡∏õ‡πá‡∏ô true ‡πÅ‡∏•‡πâ‡∏ß isLocked ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô false ‡πÄ‡∏™‡∏°‡∏≠
                  bool isLocked = !route['isUnlocked'];
                  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ
                  bool isCurrentRoute = route['id'] == widget.currentRouteId && widget.currentChapter <= 5;
                  String buttonText = route['name'];
                  if (isLocked) {
                    buttonText = 'Locked'; // ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏ñ‡πâ‡∏≤ isUnlocked ‡πÄ‡∏õ‡πá‡∏ô true
                  } else if (isCurrentRoute) {
                    buttonText = '‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠: ${route['name']} (‡∏ö‡∏ó‡∏ó‡∏µ‡πà ${widget.currentChapter})';
                  } else {
                    buttonText = '‡πÄ‡∏£‡∏¥‡πà‡∏°: ${route['name']}';
                  }

                  return Column(
                    children: [
                      ElevatedButton(
                        onPressed: isLocked
                            ? null
                            : () => moveToGate(route['id'], route['gateX']),
                        child: Text(buttonText),
                        style: ElevatedButton.styleFrom(
                          backgroundColor:
                              isLocked ? Colors.grey : (isCurrentRoute ? Colors.orange : Colors.blue),
                          minimumSize: const Size(150, 40), // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
                        ),
                      ),
                      const SizedBox(height: 10),
                      Stack(
                        alignment: Alignment.center,
                        children: [
                          Image.asset('assets/images/Gate.webp', height: 160),
                          if (isLocked) // ‡∏ñ‡πâ‡∏≤ isLocked ‡πÄ‡∏õ‡πá‡∏ô false ‡∏Å‡πá‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á icon lock
                            Icon(
                              Icons.lock,
                              size: 60,
                              color: Colors.red.withOpacity(0.7),
                            ),
                        ],
                      ),
                      if (isLocked)
                        const SizedBox(height: 5),
                      if (isLocked)
                        const Text(
                          'Coming Soon',
                          style: TextStyle(
                            color: Color.fromARGB(255, 253, 2, 2),
                          ),
                        ),
                    ],
                  );
                }).toList(),
              ),
            ),
          ),
          // ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
          Align(
            alignment: Alignment.bottomCenter,
            child: Padding(
              padding: const EdgeInsets.only(bottom: 20.0),
              child: ElevatedButton.icon(
                icon: const Icon(Icons.arrow_back),
                label: const Text('‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£'),
                onPressed: () {
                  Navigator.pop(context); // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.grey,
                  foregroundColor: Colors.white,
                  padding:
                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
                  shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(10)),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}

// ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏ï‡∏π (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
class PathPainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = Colors.brown.withOpacity(0.5)
      ..strokeWidth = 30
      ..style = PaintingStyle.stroke;

    canvas.drawLine(
      Offset(size.width * 0.5, size.height * 0.8),
      Offset(size.width * 0.25, size.height * 0.3),
      paint,
    );
    canvas.drawLine(
      Offset(size.width * 0.5, size.height * 0.8),
      Offset(size.width * 0.5, size.height * 0.3),
      paint,
    );
    canvas.drawLine(
      Offset(size.width * 0.5, size.height * 0.8),
      Offset(size.width * 0.75, size.height * 0.3),
      paint,
    );
  }

  @override
  bool shouldRepaint(CustomPainter oldDelegate) => false;
}
